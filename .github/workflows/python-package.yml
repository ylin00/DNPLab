# This workflow will install Python dependencies, run tests with a Cartesian product of Python versions and OS'
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python package

on:
  push:
    branches: [ master, develop ]
    paths-ignore: [ 'docs/**' ]
  pull_request:
    branches: [ master, develop ]

jobs:
  build-unix:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true 
      matrix:
        os: [ubuntu-16.04, ubuntu-latest, windows-latest]
        python-version: [3.6, 3.8]
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Display Python version
      run: python -c "import sys; print(sys.version)"
    - uses: actions/cache@v1
        id: cache
        with:
          path: .cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-test
    - name: Install Dependencies
      if: steps.cache.outputs.cache-hit != 'true'
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
#     - name: Lint with flake8
#       run: |
#         # stop the build if there are Python syntax errors or undefined names
#         flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
#         # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
#         flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with unittest
      run: |
        python -m unittest
    - name: Check PEP-8 format for code consistency
      run: |
        black dnplab --check 
